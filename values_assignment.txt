# Values, Types & Operators Exercises

1. What are the types of the following expressions and what do they evaluate to, and why?
* `17`
// 17 as it is a number
* `1 + 2 * 3 + 4`
// 11 as in the order of operations you use multiplication first
* `800 / 80 / 8`
//1.25 as the program divides from left to right
* `400 > 200`
// true as this runs if 400 is a greater number than 200
* `1 !== 1`
// false as !== asks if 1 is NOT equal to 1
* `true || false`
// true as only one side needs to be true in order for it to run as true
* `true && false`
// false as both must be true in order to run as true
* `20 % 6`
// 2 as we're using modulo to see that 20 is divisible by 6 3x w/a remainder of 2
* `'a' + 'b'`
// ab as we're using string concatenation

2. What will the following return?
* `typeof 4`
// number
*  `typeof 'hello'`
// string
*  `typeof true`
// boolean
* `2 === 1 || 3 === 4`
// false

3. Create a truth table for the expression A || B.

``` js
|   A   |   B   | A || B|
| true  | true  | true |
| false | true  | true |
| true  | false | true |
| false | false | false|
```

For reference, here is a truth table for the expression A && B:

``` js

|   A   |   B   | A && B |
| true  | true  | true  |
| false | true  | false |
| true  | false | false |
| false | false | false |

```
4. Create a truth table for the expression !A && !B.

``` js

|   A   |   B   |   !A   |  !B   |!A && !B|
| true  | true  | false  | false |false |
| false | true  | true  | false  |false |
| true  | false | false   | true |false |
| false | false |  true  | true  | true |

```

For reference, here is a truth table for the expression A && !B:

``` js

|   A   |   B   |   !B   | A && B |
| true  | true  | false  | false |
| false | true  | false  | false |
| true  | false | true   | true  |
| false | false |  true  | false |

```
5. Write a step-by-step evaluation for the following expression (remember order of operations): `2 + 3 * 2 + 1`.
```
2 + 3 * 2 + 1
    2 + 6 + 1
        8 + 1
            9
```

  For reference, here is a exp of a step-by-step evaluation:
  ```js
  1 + 2 + 3 + 4
      3 + 3 + 4
          6 + 4
             10
  ```

 6. Write a step-by-step evaluation for the following expression (remember order of operations): `4 / 2 + 8 / 4`.
```
4 / 2 + 8 / 4
    2 + 8 / 4
        2 + 2
            4
```

 7. Write a step-by-step evaluation for the following expression: `'ca' + 'ter' + 'pi' + 'llar'`.
```
'ca' + 'ter' + 'pi' + 'llar'
     'cater' + 'pi' + 'llar'
          'caterpi' + 'llar'
               'caterpillar'

```
 8. Write a step-by-step evaluation for the following expression: `2 * 4 === 8 && 'car' + 'pool' === 'carpool'`.
 ```
 2 * 4 === 8 && 'car' + 'pool' === 'carpool'
     8 === 8 && 'car' + 'pool' === 'carpool'
        true && 'car' + 'pool' === 'carpool'
             true && 'carpool' === 'carpool'
                                true && true
                                        true
```
