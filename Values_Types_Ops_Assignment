# Values, Types & Operators Exercises

1. What are the types of the following expressions and what do they evaluate to, and why?
* `17` // number, 17, Because a number is equal to itself //
* `1 + 2 * 3 + 4` //  number, 11, the console solves the problem using order of operations //
* `800 / 80 / 8` //  number, 1.25, It divides into each number in order //
* `400 > 200`  //  boolean, true, Comparison operators evaluate to boolean values and 400 is greater than 200 making it true//
* `1 !== 1`  //  boolean, false, The bang operator changes the value of the expression and makes it mean not equal to //
* `true || false` // boolean, true, Unless both operands in the OR statement are false its always evaluates to true //
* `true && false` // boolean, false, Unless both operands in the AND statement are true its always false//
* `20 % 6` // number, 2, The modulo expression takes the remainder of the expression divided//
* `'a' + 'b'`// string, 'ab', The addition symbol used with strings concatenates the two strings//

2. What will the following return?
* `typeof 4` // number//
*  `typeof 'hello'` // string//
*  `typeof true` // boolean //
* `2 === 1 || 3 === 4` // false //

3. Create a truth table for the expression A || B. 

For reference, here is a truth table for the expression A && B:

``` js 

|   A   |   B   | A && B |              // A       B       A || B
| true  | true  | true  |                  true    true    true
| false | true  | false |                  false   true    true
| true  | false | false |                  true    false   true
| false | false | false |                  false   false   false // 

```
4. Create a truth table for the expression !A && !B.

For reference, here is a truth table for the expression A && !B:

``` js 

|   A   |   B   |   !B   | A && B |     // A       B        !A        !B        A && B  !A && !B
| true  | true  | false  | false |         true    true     false     false     true     true
| false | true  | false  | false |         false   true     true      false     false    false
| true  | false | true   | true  |         true    false    false     true      false    false
| false | false |  true  | false |         false   false    true      true      true     true //

```
5. Write a step-by-step evaluation for the following expression (remember order of operations): `2 + 3 * 2 + 1`.
  For reference, here is a exp of a step-by-step evaluation: 
  ```js
  1 + 2 + 3 + 4           // 2 + 3 * 2 + 1
      3 + 3 + 4                  2 + 6 + 1
          6 + 4                      8 + 1
              10                         9 //
  ```
  
 6. Write a step-by-step evaluation for the following expression (remember order of operations): `4 / 2 + 8 / 4`.
    // 4 / 2 + 8 / 4
           2 + 8 / 4
               2 + 2 
                   4 //

 7. Write a step-by-step evaluation for the following expression: `'ca' + 'ter' + 'pi' + 'llar'`.

 // 'cat' + 'ter' + 'pi' + 'llar'
         'catter' + 'pi' + 'llar'
              'catterpi' + 'llar'
                   'catterpillar' //

 8. Write a step-by-step evaluation for the following expression: `2 * 4 === 8 && 'car' + 'pool' === 'carpool'`.
 
 // 2 * 4 === 8 && 'car' + 'pool' === 'carpool'
        8 === 8 && 'car' + 'pool' === 'carpool'
             8 === 8 && 'carpool' === 'carpool'
                true && 'carpool' === 'carpool'
                                  true && true
                                          true  //
